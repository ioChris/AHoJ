name: Conda via conda-incubator/setup-miniconda@v2

on: [push, pull_request, pull_request_target]

jobs:
  test-conda:
    name: Test Conda Linux (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macOS doesn't work, pymol-open-source is not available, may be possible to set up testing with normal pymol
        # windows-latest works fine, disabled to save free CI minutes
        os: [ubuntu-latest]

        # '3.10' is causing dependency in conflicts, conda+packages support still not great
        # '3.9' works fine, disabled to save free CI minutes
        python-version: ['3.8']
    defaults:
      run:
        shell: bash -l {0}  # necessary on linux to run commands within conda env
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          auto-update-conda: false
          channel-priority: strict
          show-channel-urls: true
          use-only-tar-bz2: true
          auto-activate-base: false
          python-version: ${{ matrix.python-version }}
          environment-file: conda-env.yml
          activate-environment: ahoj

      - name: Unit tests
        if: always()
        run: pytest -v -ra

      - name: Test prepare.py directly
        if: always()
        run: python prepare.py

      - name: Test apoholo_J.py directly
        if: always()
        run: | 
          python apoholo_J.py --query '1a73 A,B ZN'
          python apoholo_J.py --query '3CQV A HEM'
          python apoholo_J.py --query '3fav all zn'
          python apoholo_J.py --query '2hka all c3s'  # bovine NPC2 complex with cholesterol sulfate
          python apoholo_J.py --query '2v57 a,c prl'  # SS changes in transcriptional regulator LfrR in complex with proflavine
          python apoholo_J.py --reverse_search 1 --query '2v0v'  # test for reverse search (this is a fully apo structure)
          python apoholo_J.py --reverse_search 1 --query '2v0v a,b'

      - name: Test apoholo_J.py multi line queries
        if: always()
        run: |
          python apoholo_J.py --query $'1a73 A,B ZN \n 3CQV A HEM \n 3fav all zn'
          
        # all of the following stuff is tested in unit tests...
        # python apoholo_J.py  --query '1a73 ALL ZN'
        # python apoholo_J.py  --query '1a73 ZN'
        # python apoholo_J.py  --query '1a73'
        # python apoholo_J.py  --query '1a73 A'
        # python apoholo_J.py  --query '1a73 A ZN,MG'
        # some of the following ones are too slow:  TODO select few fast ones
        # python apoholo_J.py --query '1a0u'  # hem, big search
        # python apoholo_J.py --query '3fav'  #
        # python apoholo_J.py --query '1a73 a zn'  # ',MG,HEM'
        # python apoholo_J.py --query '5ok3 all tpo' # phosphothreonine, no apos
        # python apoholo_J.py --query '2ZB1 all gk4'
        # python apoholo_J.py --query '7l1f all F86'
        # python apoholo_J.py --query '3CQV hem'  # ,coh'# hem,f86,mg,tpo,act,jkl,ue7,909' #hem
        # python apoholo_J.py --query '1SI4 cyn'
        # python apoholo_J.py --query '2v0v a'  # this is a fully apo structure
        # python apoholo_J.py --query '2v7c a'
        # python apoholo_J.py --query '5gss all gsh'  # slow
        # python apoholo_J.py --query '1jq8 so4'
        # python apoholo_J.py --query '1l5h b CLF'
        # python apoholo_J.py --query '1DB1 vdx'  # vitamin D3 study

      - name: Conda info
        if: always()
        run: |
          conda info
          conda list
          # conda config --show-sources
          # conda config --show
          # printenv | sort
